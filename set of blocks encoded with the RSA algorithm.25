#include <stdio.h>
#include <stdlib.h>
#include <gmp.h>

void factorize_n(mpz_t n, mpz_t e, mpz_t common_factor) {
    mpz_t p, q;
    mpz_init(p);
    mpz_init(q);

    // Calculate p = gcd(common_factor, n)
    mpz_gcd(p, common_factor, n);

    // Calculate q = n / p
    mpz_div(q, n, p);

    gmp_printf("Factorized: p = %Zd, q = %Zd\n", p, q);

    // Check if e is valid
    mpz_t phi_n;
    mpz_init(phi_n);
    mpz_sub_ui(p, p, 1);
    mpz_sub_ui(q, q, 1);
    mpz_mul(phi_n, p, q);

    mpz_t d;
    mpz_init(d);

    if (mpz_invert(d, e, phi_n)) {
        gmp_printf("Private key (d): %Zd\n", d);
    } else {
        printf("Error: Unable to calculate private key.\n");
    }

    mpz_clear(p);
    mpz_clear(q);
    mpz_clear(phi_n);
    mpz_clear(d);
}

int main() {
    mpz_t n, e, common_factor;

    // Set the values of n, e, and common_factor
    mpz_inits(n, e, common_factor, NULL);

    // Assign values to n, e, and common_factor (replace these values with your actual values)
    mpz_set_str(n, "9516311845790656153499716760847001433441357", 10);
    mpz_set_str(e, "65537", 10);
    mpz_set_str(common_factor, "12345", 10);

    // Factorize n and find the private key if possible
    factorize_n(n, e, common_factor);

    // Clear allocated memory
    mpz_clears(n, e, common_factor, NULL);

    return 0;
}
